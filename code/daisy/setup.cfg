[metadata]
name = daisy
summary = OpenStack Image Service
description-file = 
	README.rst
author = OpenStack
author-email = openstack-dev@lists.openstack.org
home-page = http://www.openstack.org/
classifier = 
	Environment :: OpenStack
	Intended Audience :: Information Technology
	Intended Audience :: System Administrators
	License :: OSI Approved :: Apache Software License
	Operating System :: POSIX :: Linux
	Programming Language :: Python
	Programming Language :: Python :: 2
	Programming Language :: Python :: 2.7

[global]
setup-hooks = 
	pbr.hooks.setup_hook

[entry_points]
console_scripts = 
	daisy-api = daisy.cmd.api:main
	daisy-cache-prefetcher = daisy.cmd.cache_prefetcher:main
	daisy-cache-pruner = daisy.cmd.cache_pruner:main
	daisy-cache-manage = daisy.cmd.cache_manage:main
	daisy-cache-cleaner = daisy.cmd.cache_cleaner:main
	daisy-control = daisy.cmd.control:main
	daisy-search = daisy.cmd.search:main
	daisy-index = daisy.cmd.index:main
	daisy-manage = daisy.cmd.manage:main
	daisy-registry = daisy.cmd.registry:main
	daisy-replicator = daisy.cmd.replicator:main
	daisy-scrubber = daisy.cmd.scrubber:main
	daisy-orchestration = daisy.cmd.orchestration:main
daisy.common.image_location_strategy.modules = 
	location_order_strategy = daisy.common.location_strategy.location_order
	store_type_strategy = daisy.common.location_strategy.store_type
oslo_config.opts = 

	daisy.api = daisy.opts:list_api_opts
	daisy.registry = daisy.opts:list_registry_opts
	daisy.scrubber = daisy.opts:list_scrubber_opts
	daisy.cache= daisy.opts:list_cache_opts
	daisy.manage = daisy.opts:list_manage_opts
daisy.database.migration_backend = 
	sqlalchemy = oslo_db.sqlalchemy.migration
daisy.database.metadata_backend = 
	sqlalchemy = daisy.db.sqlalchemy.metadata
daisy.search.index_backend = 
	image = daisy.search.plugins.images:ImageIndex
	metadef = daisy.search.plugins.metadefs:MetadefIndex
daisy.flows = 
	import = daisy.async.flows.base_import:get_flow
daisy.flows.import = 
	convert = daisy.async.flows.convert:get_flow
	introspect = daisy.async.flows.introspect:get_flow

[build_sphinx]
all_files = 1
build-dir = doc/build
source-dir = doc/source

[compile_catalog]
directory = daisy/locale
domain = daisy

[update_catalog]
domain = daisy
output_dir = daisy/locale
input_file = daisy/locale/daisy.pot

[extract_messages]
keywords = _ gettext ngettext l_ lazy_gettext
mapping_file = babel.cfg
output_file = daisy/locale/daisy.pot

